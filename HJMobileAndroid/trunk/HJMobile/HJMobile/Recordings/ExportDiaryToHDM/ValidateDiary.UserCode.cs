///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

namespace HJMobileAndroid.Recordings.ExportDiaryToHDM
{
    public partial class ValidateDiary
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private void ValidateDiarySQL(String ConnectionString)
        {
        	SqlConnection sqlConnection1 = new SqlConnection(ConnectionString);
        	
        	//lets you set what SQL Query you are going to use.
        	SqlCommand cmd = new SqlCommand("Select Weather, Note, ID From HJC_Diary where ForemanID = (Select ID From HJC_Employee where Code = 'MENDOZA,M')");
        	
        	
        	//this reader is going to catch the data from the SQL Query
        	SqlDataReader reader;
        	
        	//command type is text because we created our own sql command to run instead of using a stored procedure
        	cmd.CommandType = CommandType.Text; 
			cmd.Connection = sqlConnection1;

			sqlConnection1.Open();
			
			//Theses varibles have the correct data.  I will compare them with what I get back form the SQL database
			string weather = "Warm - (75 - 90); Very Windy; Normal Ground";
			string note = "Weather Delay:Too windy at first  Visitor - Inspector:  Subcontractor Issue:sub did not work  Verbal Instruction Given:Todd was being a jerk  Other Suggestion:Would be nice if app was rainbow colored  Underground Utility Damage Report:  Contract Documents:  Subcontracts:  Email:sent an email to Todd's mother about his behavior  Utility Hit - Water:  We worked hard today.  It started out too windy, but we made up for it.  Todd was not working so I had words with him and sent him home.   The sub did not show up with enough guys to be effective.  Inspector Accepted  Welding  Compaction  Installation Method  RFI Approval Of Shop Drawings  Eqp Arrived Broken Down  No Inspector  Sub - Incorrect Material  Material Failed Specification  Need More Trucks  No Lost Time Accident  Visitor - News Media  Limited Work Time - Traffic";
        
			//At the end, if goodDiary is still true, then I will know that all the tests past
			bool goodDiary = true;
			
			reader = cmd.ExecuteReader();
			
			//Read() gets the next row of the SQL query results, but also tells sends back a boolean that says if there is data
			//So if there is no data, then I know that the Diary did not even make it to HDM
			if(!reader.Read())
			{
				Report.Failure("Diary was not found in HDM");
				goodDiary = false;
			}
			else
			{
				//Comparing the working conditions
				if(reader.GetString(0) != weather)
				{
					Report.Failure("Working Conditions were incorrect");
					goodDiary = false;
				}
				else
					Report.Success("Working Conditions were correct");
				
				//I am removing the whitespace before comparing the Diary Note.  I think I am having a problem with the carrage returns
				if(Regex.Replace(reader.GetString(1), @"\s", "") != Regex.Replace(note, @"\s",""))
				{
					Report.Failure("Note was incorrect");
					goodDiary = false;
				}
				else
					Report.Success("Note was correct");
						
			
			
				//Do this again for the Note Indexes
			
				//get the diary's GUID from the previous SQL call
				string diaryID = reader.GetGuid(2).ToString().ToUpper();
				
				sqlConnection1.Close();
			
				cmd = new SqlCommand("Select HJC_Note.Code From HJC_Note, HJC_NoteIndexEntry where HJC_NoteIndexEntry.NoteEntryID = '" + diaryID + "' and HJC_Note.ID = HJC_NoteIndexEntry.NoteID order by HJC_Note.Code");
				cmd.CommandType = CommandType.Text; 
				cmd.Connection = sqlConnection1;
			
				sqlConnection1.Open();
			
				reader = cmd.ExecuteReader();
			
				string[] noteIndexes = new String[10] {
					"DC01",
					"DC02",
					"DC03",
					"FORM02",
					"SGGST02",
					"SUBISSUE",
					"UTIL05",
					"VERBAL",
					"VIS-INSP",
					"W.DELAY"};
			
				bool moreData = false;
				int count = 0;
			
				moreData = reader.Read();
				
				while(moreData && count != 10)
				{
					if(reader.GetString(0) != noteIndexes[count])
					{
						Report.Failure("I was expecting Note Index " + noteIndexes[count] + ", but I got " + reader.GetString(0));
						goodDiary = false;
					}
					else
						Report.Success("Correctly Found Note Index " + noteIndexes[count]);
				
					count = count + 1;
					moreData = reader.Read();
				}
			
				if(moreData)
					Report.Failure("Found more than 10 Note Indexes");
				else if(count != 10)
					Report.Failure("I was expecting 10 Note Indexes, but I only got " + count);
				else if(goodDiary)
					Report.Success("Diary was correct");
			}
			sqlConnection1.Close();
        }

    }
}