///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace HJMobileAndroid.Recordings.ImportNewSetupsFromManager
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DropXML recording.
    /// </summary>
    [TestModule("4c2e0dff-f3c9-477d-b8c2-6480a1ce0fe1", ModuleType.Recording, 1)]
    public partial class DropXML : ITestModule
    {
        /// <summary>
        /// Holds an instance of the HJMobileAndroid.HJMobileAndroidRepository repository.
        /// </summary>
        public static HJMobileAndroid.HJMobileAndroidRepository repo = HJMobileAndroid.HJMobileAndroidRepository.Instance;

        static DropXML instance = new DropXML();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DropXML()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DropXML Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.4")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.4")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move at {X=0,Y=0}.", new RecordItemIndex(0));
            Mouse.MoveTo(0, 0);
            Delay.Milliseconds(200);
            
            // opening start menu to get to run program
            Report.Log(ReportLevel.Info, "Mouse", "opening start menu to get to run program\r\nMouse Left Click item 'QaAutomationQaAutomationRemoteD.OPWindowClass' at 22;28.", repo.QaAutomationQaAutomationRemoteD.OPWindowClassInfo, new RecordItemIndex(1));
            repo.QaAutomationQaAutomationRemoteD.OPWindowClass.Click(new Location(OPWindowClass_Screenshot1, "22;28", OPWindowClass_Screenshot1_Options));
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1m.", new RecordItemIndex(2));
            Delay.Duration(60000, false);
            
            // opening folder to see if files are there
            Report.Log(ReportLevel.Info, "Keyboard", "opening folder to see if files are there\r\nKey sequence 'c'.", new RecordItemIndex(3));
            Keyboard.Press("c");
            Delay.Milliseconds(300);
            
            TypeColon();
            Delay.Milliseconds(0);
            
            // typing in the batch file that will copy the xml files to the correct folder
            Report.Log(ReportLevel.Info, "Keyboard", "typing in the batch file that will copy the xml files to the correct folder\r\nKey sequence '\\heavyjob\\mgrcnsldsvc\\automation files\\setups.bat'.", new RecordItemIndex(5));
            Keyboard.Press("\\heavyjob\\mgrcnsldsvc\\automation files\\setups.bat");
            Delay.Milliseconds(0);
            
            // run that batch file
            Report.Log(ReportLevel.Info, "Keyboard", "run that batch file\r\nKey sequence '{Return}'.", new RecordItemIndex(6));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10m.", new RecordItemIndex(7));
            Delay.Duration(600000, false);
            
        }

#region Image Feature Data
        CompressedImage OPWindowClass_Screenshot1
        { get { return repo.QaAutomationQaAutomationRemoteD.OPWindowClassInfo.GetScreenshot1(new Rectangle(5, 1037, 44, 37)); } }

        Imaging.FindOptions OPWindowClass_Screenshot1_Options
        { get { return Imaging.FindOptions.Parse("0.93;None;0,0,0,0;True;10000000;0ms"); } }

#endregion
    }
#pragma warning restore 0436
}
