///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace HJMobileAndroid.Recordings.SetupTeardown
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The RemoteDesktopLogin recording.
    /// </summary>
    [TestModule("de89e38d-6412-47fd-a06b-7fe871d10f0f", ModuleType.Recording, 1)]
    public partial class RemoteDesktopLogin : ITestModule
    {
        /// <summary>
        /// Holds an instance of the HJMobileAndroid.HJMobileAndroidRepository repository.
        /// </summary>
        public static HJMobileAndroid.HJMobileAndroidRepository repo = HJMobileAndroid.HJMobileAndroidRepository.Instance;

        static RemoteDesktopLogin instance = new RemoteDesktopLogin();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public RemoteDesktopLogin()
        {
            RemoteDesktopFile = "C:\\RanorexStudioProjects\\HJMobile\\qa-automation.rdp";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static RemoteDesktopLogin Instance
        {
            get { return instance; }
        }

#region Variables

        string _RemoteDesktopFile;

        /// <summary>
        /// Gets or sets the value of variable RemoteDesktopFile.
        /// </summary>
        [TestVariable("713e8d03-52ae-491d-b2d0-ec65e1d205f8")]
        public string RemoteDesktopFile
        {
            get { return _RemoteDesktopFile; }
            set { _RemoteDesktopFile = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.4")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.4")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run application with file name from variable $RemoteDesktopFile with arguments '' in normal mode.", new RecordItemIndex(0));
            Host.Local.RunApplication(RemoteDesktopFile, "", "", false);
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'RemoteDesktopConnection.Connect' at Center.", repo.RemoteDesktopConnection.ConnectInfo, new RecordItemIndex(1));
                repo.RemoteDesktopConnection.Connect.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(2));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'HCSS*iodroid'.", new RecordItemIndex(3));
            Keyboard.Press("HCSS*iodroid");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(4));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'QaAutomationQaAutomationRemoteD.Maximize' at 14;12.", repo.QaAutomationQaAutomationRemoteD.MaximizeInfo, new RecordItemIndex(5));
                repo.QaAutomationQaAutomationRemoteD.Maximize.Click("14;12");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 4m.", new RecordItemIndex(6));
            Delay.Duration(240000, false);
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating ContainsImage (Screenshot: 'Screenshot1' with region {X=4,Y=1041,Width=111,Height=37}) on item 'QaAutomationQaAutomationRemoteD.OPWindowClass'.", repo.QaAutomationQaAutomationRemoteD.OPWindowClassInfo, new RecordItemIndex(7));
                //Validate.ContainsImage(repo.QaAutomationQaAutomationRemoteD.OPWindowClassInfo, OPWindowClass_Screenshot1, OPWindowClass_Screenshot1_Options, Validate.DefaultMessage, false);
                //Delay.Milliseconds(10000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
        }

#region Image Feature Data
        CompressedImage OPWindowClass_Screenshot1
        { get { return repo.QaAutomationQaAutomationRemoteD.OPWindowClassInfo.GetScreenshot1(new Rectangle(4, 1041, 111, 37)); } }

        Imaging.FindOptions OPWindowClass_Screenshot1_Options
        { get { return Imaging.FindOptions.Parse("0.945;None;0,0,0,0;True;10000000;300000ms"); } }

#endregion
    }
#pragma warning restore 0436
}
