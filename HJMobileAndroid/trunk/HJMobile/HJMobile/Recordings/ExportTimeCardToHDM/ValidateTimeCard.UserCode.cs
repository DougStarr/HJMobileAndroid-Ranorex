///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

namespace HJMobileAndroid.Recordings.ExportTimeCardToHDM
{
    public partial class ValidateTimeCard
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        private void ValidateTimeCardSQL(String ConnectionString)
        {
        	SqlConnection sqlConnection1 = new SqlConnection(ConnectionString);
        	string SQLStatement = 
        		"Select job.Code [JobCode], tc.Shift " +
        		"From HJC_Job job, HJC_Timecard tc " +
        		"Where tc.jobID = job.ID and tc.foremanID = (Select ID From HJC_Employee where Code = 'MENDOZA,M')";
        	
        	SqlCommand cmd = new SqlCommand(SQLStatement);
        	
        	SqlDataReader reader;
        	
        	cmd.CommandType = CommandType.Text; 
			cmd.Connection = sqlConnection1;
			
			sqlConnection1.Open();
			
			string job = "HJMOBILE1";
			int shift = 2;
			
			bool goodTimeCard = true;
			
			
			reader = cmd.ExecuteReader();
			
			if(!reader.Read())
			{
				Report.Failure("Time Card not found in HDM");
				goodTimeCard = false;
			}
			else
			{
				if(reader.GetString(0) != job)
				{
					Report.Failure("I was expecting to find a time card for job:" + job + ", but I found one for job: " + reader.GetString(0));
					goodTimeCard = false;
				}
				else
					Report.Success("I correctly found a time card for job: " + job);
				
				if(reader.GetInt32(1) != shift)
				{
					Report.Failure("I was expecting the time card to be shift " + shift + ", but it was shift " + reader.GetInt32(1));
					goodTimeCard = false;
				}
				else
					Report.Success("The Time Card is correctly shift " + shift);
				
				if(goodTimeCard)
					Report.Success("Time Card found for correct job and with correct shift");
			}
			
			sqlConnection1.Close();
        }
        
        private void ValidateTimeCardCostCodes(String ConnectionString)
        {
        	SqlConnection sqlConnection1 = new SqlConnection(ConnectionString);
        	string SQLStatement = 
        		"Select cc.Code [CostCode], tcq.CostCodeTag, tcq.IsRework, tcq.IsTM, tcq.Quantity, tcq.slot " +
        		"From HJC_CostCode cc, HJC_TimecardQuantity tcq " +
        		"Where cc.ID = tcq.CostCodeID and timecardid in (Select ID From HJC_Timecard Where ForemanID = (Select ID From HJC_Employee where Code = 'MENDOZA,M')) order by slot";
        	
        	SqlCommand cmd = new SqlCommand(SQLStatement);
        	
        	SqlDataReader reader;
        	
        	cmd.CommandType = CommandType.Text; 
			cmd.Connection = sqlConnection1;
			
			sqlConnection1.Open();
			
			string[] costCode = new string[25] {
				"01-0910001",
				"02-0201004",
				"02-0201004",
				"02-0201004",
				"02-0203001",
				"02-0265010",
				"02-0265010",
				"03-0213003",
				"03-0213003",
				"04-0410050",
				"04-0410050",
				"06-0490050",
				"06-0490050",
				"07-0490050",
				"07-0490050",
				"09-0655000",
				"09-987870",
				"10-0600100",
				"11-0674010",
				"12-0653020",
				"12-0653020",
				"12-0653020",
				"9002XTR",
				"07-0490053",
				"09-0655011"
			};
			
			string[] costCodeTag = new string[25] {
				"",
				"1ST",
				"5TH",
				"10TH",
				"",
				"",
				"ST400",
				"WRKORD01",
				"WRKORD02",
				"ST435",
				"",
				"",
				"",
				"",
				"",
				"5TH",
				"",
				"ST460",
				"",
				"",
				"1ST",
				"",
				"",
				"",
				""
			};
			
			bool[] isRework = new bool[25] 	{false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
			bool[] isTM = new bool[25] 		{false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false};
			
			decimal[] quantity = new decimal[25]{
				1,
				5000,
				2000,
				1000,
				500,
				400,
				600,
				5000,
				7000,
				50,
				45,
				6,
				3,
				2,
				3,
				3000,
				60,
				2000,
				400,
				800,
				900,
				2000,
				1,
				2,
				200
			};
			
			int[] slot = new int[25] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
			
			
			bool goodTimeCardCostCodes = true;
			bool timeCardCostCodesMoreData = false;
			int timeCardCostCodesCount = 0;
			
			
			reader = cmd.ExecuteReader();
			timeCardCostCodesMoreData = reader.Read();
			
			while(timeCardCostCodesMoreData && timeCardCostCodesCount != 25)
			{
				if(reader.GetString(0) != costCode[timeCardCostCodesCount])
				{
					goodTimeCardCostCodes = false;
					Report.Failure("I was expecting cost code: " + costCode[timeCardCostCodesCount] + ", but I got cost code: " + reader.GetString(0));
				}
				else
					Report.Success("Correctly found cost code: " + costCode[timeCardCostCodesCount]);
				
				if(reader.GetString(1) != costCodeTag[timeCardCostCodesCount])
				{
					goodTimeCardCostCodes = false;
					Report.Failure("I was expecting cost code tag: " + costCodeTag[timeCardCostCodesCount] + ", but I got cost code tag: " + reader.GetString(1));
				}
				else
					Report.Success("Correctly found cost code tag: " + costCodeTag[timeCardCostCodesCount]);
				
				if(reader.GetBoolean(2) != isRework[timeCardCostCodesCount])
				{
					goodTimeCardCostCodes = false;
					Report.Failure("I was expecting rework: " + isRework[timeCardCostCodesCount] + ", but I got rework: " + reader.GetBoolean(2));
				}
				else
					Report.Success("Correctly found rework: " + isRework[timeCardCostCodesCount]);
				
				if(reader.GetBoolean(3) != isTM[timeCardCostCodesCount])
				{
					goodTimeCardCostCodes = false;
					Report.Failure("I was expecting TM: " + isTM[timeCardCostCodesCount] + ", but I got TM: " + reader.GetBoolean(3));
				}
				else
					Report.Success("Correctly found TM: " + isTM[timeCardCostCodesCount]);
				
				if(reader.GetDecimal(4) != quantity[timeCardCostCodesCount])
				{
					goodTimeCardCostCodes = false;
					Report.Failure("I was expecting quantity of " + quantity[timeCardCostCodesCount] + ", but I got quantity of " + reader.GetDecimal(4));
				}
				else
					Report.Success("Correctly found quantity of " + quantity[timeCardCostCodesCount]);
				
				if(reader.GetInt32(5) != slot[timeCardCostCodesCount])
				{
					goodTimeCardCostCodes = false;
					Report.Failure("I was expecting slot: " + slot[timeCardCostCodesCount] + ", but I got slot: " + reader.GetInt32(5));
				}
				else
					Report.Success("Correctly found slot: " + slot[timeCardCostCodesCount]);
				
				timeCardCostCodesCount = timeCardCostCodesCount + 1;
				timeCardCostCodesMoreData = reader.Read();
			}
			
			if(timeCardCostCodesMoreData)
				Report.Failure("Found more than 25 Cost Codes");
			else if(timeCardCostCodesCount != 25)
				Report.Failure("I was expecting 25 Cost Codes, but I only got " + timeCardCostCodesCount);
			else if(goodTimeCardCostCodes)
				Report.Success("All Cost Codes are correct");
			
			sqlConnection1.Close();
			
        }
        
        
        private void ValidateTimeCardCostCodeNotes(String ConnectionString)
        {
        	SqlConnection sqlConnection1 = new SqlConnection(ConnectionString);
        	string SQLStatement = 
        		"Select cc.Code [CostCode], tcccn.Slot, tcccn.CompanyNote, tcccn.InspectorNote " +
        		"From HJC_CostCode cc, HJC_TimecardCostCodeNote tcccn " +
        		"Where cc.ID = tcccn.CostCodeID and timecardid in (Select ID From HJC_Timecard Where ForemanID = (Select ID From HJC_Employee where Code = 'MENDOZA,M')) order by slot";
        	
        	SqlCommand cmd = new SqlCommand(SQLStatement);
        	
        	SqlDataReader reader;
        	
        	cmd.CommandType = CommandType.Text; 
			cmd.Connection = sqlConnection1;
			
			sqlConnection1.Open();
			
			string[] costCode = new string[5] {
				"01-0910001",
				"02-0201004",
				"02-0203001",
				"03-0213003",
				"09-987870"	
			};
			
			int[] slot = new int[5] { 1, 4, 5, 8, 17 };
			
			string[] companyNote = new string[5] {
				"Company note",
				"Our rework",
				"",
				"This is our company note",
				"This work was for digging out rocks"
			};
			
			string[] inspectorNote = new string[5] {
				"Inspector note",
				"",
				"Note for the inspector",
				"",
				""
			};
			
			bool goodTimeCardCostCodeNotes = true;
			bool timeCardCostCodeNotesMoreData = false;
			int timeCardCostCodeNotesCount = 0;
			
			
			reader = cmd.ExecuteReader();
			timeCardCostCodeNotesMoreData = reader.Read();
			
			while(timeCardCostCodeNotesMoreData && timeCardCostCodeNotesCount != 5)
			{
				if(reader.GetString(0) != costCode[timeCardCostCodeNotesCount])
				{
					goodTimeCardCostCodeNotes = false;
					Report.Failure("I was expecting cost code: " + costCode[timeCardCostCodeNotesCount] + ", but I got cost code: " + reader.GetString(0));
				}
				else
					Report.Success("Correctly found cost code: " + costCode[timeCardCostCodeNotesCount]);
				
				if(reader.GetInt32(1) != slot[timeCardCostCodeNotesCount])
				{
					goodTimeCardCostCodeNotes = false;
					Report.Failure("I was expecting slot: " + slot[timeCardCostCodeNotesCount] + ", but I got slot: " + reader.GetInt32(1));
				}
				else
					Report.Success("Correctly found slot: " + slot[timeCardCostCodeNotesCount]);
				
				if(reader.GetString(2) != companyNote[timeCardCostCodeNotesCount])
				{
					goodTimeCardCostCodeNotes = false;
					Report.Failure("I was expecting company note: " + companyNote[timeCardCostCodeNotesCount] + ", but I got company note: " + reader.GetString(2));
				}
				else
					Report.Success("Correctly found company note: " + companyNote[timeCardCostCodeNotesCount]);
				
				if(reader.GetString(3) != inspectorNote[timeCardCostCodeNotesCount])
				{
					goodTimeCardCostCodeNotes = false;
					Report.Failure("I was expecting inspector note: " + inspectorNote[timeCardCostCodeNotesCount] + ", but I got inspector note: " + reader.GetString(3));
				}
				else
					Report.Success("Correctly found inspector note: " + inspectorNote[timeCardCostCodeNotesCount]);
				
				timeCardCostCodeNotesCount = timeCardCostCodeNotesCount + 1;
				timeCardCostCodeNotesMoreData = reader.Read();
			}
			
			if(timeCardCostCodeNotesMoreData)
				Report.Failure("Found more than 5 Cost Code Notes");
			else if(timeCardCostCodeNotesCount != 5)
				Report.Failure("I was expecting 5 Cost Code Notes, but I only got " + timeCardCostCodeNotesCount);
			else if(goodTimeCardCostCodeNotes)
				Report.Success("All Cost Code Notes are correct");
        }
        
        
        private void ValidateTimeCardEntriesSQL(String ConnectionString)
        {
        	SqlConnection sqlConnection1 = new SqlConnection(ConnectionString);
        	
        	string SQLStatement =
        		"Select emp.Code [Employee], eqp.Code [Equipment], pc.Code [PayClass], tce.Slot, tce.Hours, tcat.code [TimeCategory], ttype.description [TimeType], tce.Cost " +
				"From HJC_TimecardEntry tce " +
  				"Left Join HJC_Employee emp On tce.EmployeeID = emp.ID " +
  				"Left Join HJC_Equipment eqp On tce.EquipmentID = eqp.ID " +
  				"Left Join HJC_PayClass pc On tce.PayClassID = pc.ID " +
  				"Left Join HJC_TimeCategory tcat On tce.TimeCategoryID = tcat.ID " +
  				"Left Join HJC_TimeType ttype On tce.TimeTypeID = ttype.ID " +
				"Where tce.TimecardID In (Select ID From HJC_Timecard Where ForemanID = (Select ID From HJC_Employee where Code = 'MENDOZA,M')) " +
				"Order by employee, equipment, tce.slot, TimeType, TimeCategory";
        	
        	
        	//lets you set what SQL Query you are going to use.
        	SqlCommand cmd = new SqlCommand(SQLStatement);
        	
        	
        	//this reader is going to catch the data from the SQL Query
        	SqlDataReader reader;
        	
        	//command type is text because we created our own sql command to run instead of using a stored procedure
        	cmd.CommandType = CommandType.Text; 
			cmd.Connection = sqlConnection1;

			sqlConnection1.Open();
			
			string[] employee = new string[206] {
				"0", "0", "0", "0",	"0", "0", "0", "0",	"0", "0", "0", "0", "0", "0",
				"BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", 
				"BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", "BOB,B", 
				"CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F", "CAROL,F",
				"DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", "DUCKE,D", 
				"MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", 
				"MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", 
				"MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", 
				"MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", 
				"MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", "MENDOZA,M", 
				"SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S",
				"SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S", "SIEGFRIED,S",
				"STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", 
				"STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", "STEWART,A", 
				"STEWART,A", "STEWART,A", "STEWART,A"
			};
			
			string[] equipment = new string[206] {
				"LZ", "LZ", "LZ", "LZ", "LZ", "LZ", "LZ", "LZ", "LZ", "LZ", "LZ", "LZ", "LZ", "LZ", 
				"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
				"ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", "ARC-2356", 
				"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
				"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
				"D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", "D8-4080", 
				"E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", 
				"E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", "E235-6032", 
				"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
				"0", "0", "0", 
				"BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", "BH426-8020", 
				"BH426-8020", "BH426-8020" 
			};
			
			string[] payclass = new string[206] {
				"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
				"LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", 
				"LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", 
				"LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", 
				"LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", 
				"FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", 
				"FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", 
				"FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", 
				"FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", 
				"FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN", "FOREMAN",
				"LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", 
				"LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", 
				"LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", "LABOR", 
			};
			
			int[] slot = new int[206] {
				1, 2, 3, 4, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 2, 3, 3, 3, 4, 4, 6, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 3, 4, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 2, 3, 3, 3, 4, 4, 6, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 2, 3, 3, 3, 4, 4, 6, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 2, 3, 3, 3, 4, 4, 6, 6, 7, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 3, 4, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 3, 4, 6, 7, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 2, 3, 3, 3, 4, 4, 6, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 2, 3, 3, 3, 4, 4, 6, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25,
				1, 2, 3, 4, 6, 7, 8, 16, 17, 18, 19, 23, 24, 25
			};
			
			decimal[] hours = new decimal[206] {
				.1M, .2M, .3M, .2M, .2M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1,
				.1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1, 
				.1M, .2M, .3M, .2M, .2M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1,
				.1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1, 
				.1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1, 
				.1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1,
				.1M, .2M, .3M, .2M, .2M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1,
				.1M, .2M, .3M, .2M, .2M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1,
				.1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1,
				.1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1,
				.1M, .2M, .3M, .2M, .2M, .1M, .1M, .1M, .1M, 1, 1, 1, 1, 1,
			};
			
			string[] timeCategory = new string[206] {
				"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0",
				"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0",
				"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0",
				"0","H","S","0","E","V","0","A","T",
				"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0",
				"0","D","S","0","M","R","0","T","W",
				"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0",
				"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"
			};
			
			string[] timeType = new string[206] {
				"RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", 
				"REG", "OT", "REG", "OT", "OTH", "REG", "OTH", "REG", "OT", "OTH", "OTH", "OT", "REG", "REG", "REG", "REG", "REG", "REG", "REG",
				"RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1",
				"REG", "OT", "REG", "OT", "OTH", "REG", "OTH", "REG", "OT", "OTH", "OTH", "OT", "REG", "REG", "REG", "REG", "REG", "REG", "REG",
				"REG", "OT", "REG", "OT", "OTH", "REG", "OTH", "REG", "OT", "OTH", "OTH", "OT", "REG", "REG", "REG", "REG", "REG", "REG", "REG",
				"REG", "OT", "REG", "OT", "OTH", "REG", "OTH", "REG", "OT", "OTH", "OTH", "OT", "REG", "REG", "REG", "OT", "OT", "OT", "OTH", "OTH", "OTH", "REG", "REG", "REG", "REG", "REG", "REG", "REG", "REG", "REG", "REG", "REG",
				"RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", 
				"RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE2", "RATE2", "RATE2", "RATE3", "RATE3", "RATE3", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1",
				"REG", "OT", "REG", "OT", "OTH", "REG", "OTH", "REG", "OT", "OTH", "OTH", "OT", "REG", "REG", "REG", "REG", "REG", "REG", "REG",
				"REG", "OT", "REG", "OT", "OTH", "REG", "OTH", "REG", "OT", "OTH", "OTH", "OT", "REG", "REG", "REG", "REG", "REG", "REG", "REG",
				"RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1", "RATE1"
			};
			
			decimal[] cost = new decimal[206] {
				.2M, .4M, .6M, .4M, .4M, .2M, .2M, .2M, .2M, 2, 2, 2, 2, 2,
				3.11M, 4.41M, 3.11M, 4.41M, 5.71M, 3.11M, 5.71M, 3.11M, 4.41M, 5.71M, 5.71M, 4.41M, 3.11M, 2.86M, 31.08M, 31.08M, 28.56M, 31.08M, 31.08M,
				21.5M, 43, 64.5M, 43, 43, 21.5M, 21.5M, 21.5M, 21.5M, 215, 215, 215, 215, 215,
				3.11M, 4.41M, 3.11M, 4.41M, 5.71M, 3.11M, 5.71M, 3.11M, 4.41M, 5.71M, 5.71M, 4.41M, 3.11M, 2.86M, 31.08M, 31.08M, 28.56M, 31.08M, 31.08M,
				3.11M, 4.41M, 3.11M, 4.41M, 5.71M, 3.11M, 5.71M, 3.11M, 4.41M, 5.71M, 5.71M, 4.41M, 3.11M, 2.86M, 31.08M, 31.08M, 28.56M, 31.08M, 31.08M,
				3.39M, 3.39M, 3.39M, 3.39M, 6.43M, 3.39M, 6.43M, 3.39M, 3.39M, 6.43M, 6.43M, 3.39M, 3.39M, 0, 3.39M, 3.39M, 0, 0, 6.43M, 0, 0, 3.39M, 3.39M , 3.39M, 3.39M, 3.39M, 3.04M, 33.88M, 33.88M, 30.41M, 33.88M, 33.88M,
				6.58M, 13.16M, 19.74M, 13.16M, 13.16M, 6.58M, 6.58M, 6.58M, 6.58M, 65.79M, 65.79M, 65.79M, 65.79M, 65.79M, 
				6.6M, 13.19M, 19.79M, 13.19M, 13.19M, 6.6M, 6.6M, 6.59M, 0, 0, 5.25M, 0, 5.25M, 0, 0, 0, 6.6M, 6.6M, 65.95M, 65.95M, 65.95M, 65.95M, 65.95M,
				3.11M, 4.41M, 3.11M, 4.41M, 5.71M, 3.11M, 5.71M, 3.11M, 4.41M, 5.71M, 5.71M, 4.41M, 3.11M, 2.86M, 31.08M, 31.08M, 28.56M, 31.08M, 31.08M,
				4.08M, 5.38M, 4.08M, 5.38M, 6.68M, 4.08M, 6.69M, 4.08M, 5.38M, 6.68M, 6.68M, 5.38M, 4.08M, 3.83M, 40.76M, 40.76M, 38.24M, 40.76M, 40.76M,
				2.61M, 5.23M, 7.84M, 5.23M, 5.23M, 2.61M, 2.61M, 2.61M, 2.61M, 26.13M, 26.13M, 26.13M, 26.13M, 26.13M
			};
			
			bool goodTimeCardEntries = true;
			bool timeCardEntryMoreData = false;
			int timeCardEntryCount = 0;
			
			
			reader = cmd.ExecuteReader();
			timeCardEntryMoreData = reader.Read();
			
			while(timeCardEntryMoreData && timeCardEntryCount != 206)
			{
				//verify employees
				if(!reader.IsDBNull(0))
				{	
					
					if(reader.GetString(0) != employee[timeCardEntryCount])
					{
						goodTimeCardEntries = false;
						Report.Failure("For record " + timeCardEntryCount + " I was expecting employee to be " + employee[timeCardEntryCount] + ", but I got " + reader.GetString(0));
					}
					else
						Report.Success("[" + timeCardEntryCount + "]Correctly found employee " + employee[timeCardEntryCount]);
				}
				else if(employee[timeCardEntryCount] != "0")
				{
					goodTimeCardEntries = false;
					Report.Failure("For record " + timeCardEntryCount + " I was expecting employee to be " + employee[timeCardEntryCount] + ", but I got NULL");
				}
				else
					Report.Success("[" + timeCardEntryCount + "]Correctly found that employee was NULL");
				
				//verify equipment				
				if(!reader.IsDBNull(1))
				{	
					
					if(reader.GetString(1) != equipment[timeCardEntryCount])
					{
						goodTimeCardEntries = false;
						Report.Failure("For record " + timeCardEntryCount + " I was expecting equipment to be " + equipment[timeCardEntryCount] + ", but I got " + reader.GetString(1));
					}
					else
						Report.Success("[" + timeCardEntryCount + "]Correctly found equipment " + equipment[timeCardEntryCount]);
				}
				else if(equipment[timeCardEntryCount] != "0")
				{
					goodTimeCardEntries = false;
					Report.Failure("For record " + timeCardEntryCount + " I was expecting equipment to be " + equipment[timeCardEntryCount] + ", but I got NULL");
				}
				else
					Report.Success("[" + timeCardEntryCount + "]Correctly found that equipment was NULL");
				
				//verify pay classes
				if(!reader.IsDBNull(2))
				{	
					
					if(reader.GetString(2) != payclass[timeCardEntryCount])
					{
						goodTimeCardEntries = false;
						Report.Failure("For record " + timeCardEntryCount + " I was expecting pay class to be " + payclass[timeCardEntryCount] + ", but I got " + reader.GetString(2));
					}
					else
						Report.Success("[" + timeCardEntryCount + "]Correctly found pay class " + payclass[timeCardEntryCount]);
				}
				else if(payclass[timeCardEntryCount] != "0")
				{
					goodTimeCardEntries = false;
					Report.Failure("For record " + timeCardEntryCount + " I was expecting pay class to be " + payclass[timeCardEntryCount] + ", but I got NULL");
				}
				else
					Report.Success("[" + timeCardEntryCount + "]Correctly found that pay class was NULL");
				
				//verify slots
				if(reader.GetInt32(3) != slot[timeCardEntryCount])
				{
					goodTimeCardEntries = false;
					Report.Failure("For record " + timeCardEntryCount + " I was expecting slot to be " + slot[timeCardEntryCount] + ", but I got " + reader.GetInt32(3));
				}
				else
					Report.Success("[" + timeCardEntryCount + "]Correctly found slot " + slot[timeCardEntryCount]);
				
				//verify hours
				if(reader.GetDecimal(4) != hours[timeCardEntryCount])
				{
					goodTimeCardEntries = false;
					Report.Failure("For record " + timeCardEntryCount + " I was expecting hours to be " + hours[timeCardEntryCount] + ", but I got " + reader.GetDecimal(4));
				}
				else
					Report.Success("[" + timeCardEntryCount + "]Correctly found hours of " + hours[timeCardEntryCount]);
					
				//verify Time Categories
				if(!reader.IsDBNull(5))
				{	
					
					if(reader.GetString(5) != timeCategory[timeCardEntryCount])
					{
						goodTimeCardEntries = false;
						Report.Failure("For record " + timeCardEntryCount + " I was expecting time category to be " + timeCategory[timeCardEntryCount] + ", but I got " + reader.GetString(5));
					}
					else
						Report.Success("[" + timeCardEntryCount + "]Correctly found time category of " + timeCategory[timeCardEntryCount]);
				}
				else if(timeCategory[timeCardEntryCount] != "0")
				{
					goodTimeCardEntries = false;
					Report.Failure("For record " + timeCardEntryCount + " I was expecting time category to be " + timeCategory[timeCardEntryCount] + ", but I got NULL");
				}
				else
					Report.Success("[" + timeCardEntryCount + "]Correctly found that time category was NULL");
	
			
				//verify Time Types
				if(reader.GetString(6) != timeType[timeCardEntryCount])
				{
					goodTimeCardEntries = false;
					Report.Failure("For record " + timeCardEntryCount + " I was expecting time type to be " + timeType[timeCardEntryCount] + ", but I got " + reader.GetString(6));
				}
				else
					Report.Success("[" + timeCardEntryCount + "]Correctly found time type " + timeType[timeCardEntryCount]);
				
				//verify cost
				if(reader.GetDecimal(7) < cost[timeCardEntryCount] - .05M  || reader.GetDecimal(7) > cost[timeCardEntryCount] + .05M)
				{
					goodTimeCardEntries = false;
					Report.Failure("For record " + timeCardEntryCount + " I was expecting cost to be " + cost[timeCardEntryCount] + ", but I got " + reader.GetDecimal(7));
				}
				else
					Report.Success("[" + timeCardEntryCount + "]Correctly found cost of " + cost[timeCardEntryCount]);
				
				timeCardEntryCount = timeCardEntryCount + 1;
				timeCardEntryMoreData = reader.Read();
			}
			
			if(timeCardEntryMoreData)
				Report.Failure("Found more than 206 Time Card Entries");
			else if(timeCardEntryCount != 206)
				Report.Failure("I was expecting 206 Time Card Entries, but I only got " + timeCardEntryCount);
			else if(goodTimeCardEntries)
				Report.Success("All Time Card Entries are correct");
			
			sqlConnection1.Close();
        }

        private void ValidateTimeCardEmpEqpNotes(String ConnectionString)
        {
        	SqlConnection sqlConnection1 = new SqlConnection(ConnectionString);
        	
        	string SQLStatement =
        		"Select emp.Code [EmpCode], eqp.Code [EqpCode], tced.IsPerDiem, tced.Subsistence, tced.StartTime, tced.Break1, tced.Break2, tced.EndTime, tced.MeterOn, tced.MeterOff, tced.Note " +
				"From HJC_TimecardEntryDetail tced " +
  				"Left Join HJC_Employee emp On tced.EmployeeID = emp.ID " +
  				"Left Join HJC_Equipment eqp On tced.EquipmentID = eqp.ID " +
				"Where tced.TimecardID In (Select ID From HJC_Timecard Where ForemanID = (Select ID From HJC_Employee where Code = 'MENDOZA,M')) " +
				"Order By EmpCode, EqpCode";
        	
        	
        	//lets you set what SQL Query you are going to use.
        	SqlCommand cmd = new SqlCommand(SQLStatement);
        	
        	
        	//this reader is going to catch the data from the SQL Query
        	SqlDataReader reader;
        	
        	//command type is text because we created our own sql command to run instead of using a stored procedure
        	cmd.CommandType = CommandType.Text; 
			cmd.Connection = sqlConnection1;

			sqlConnection1.Open();
			
			string[] employee = new string[11] {
				"0",
				"0",
				"0",
				"0",
				"0",
				"BOB,B",
				"CAROL,F",
				"DUCKE,D",
				"MENDOZA,M",
				"SIEGFRIED,S",
				"STEWART,A"	
			};
			
			string[] equipment = new string[11] {
				"ARC-2356",
				"BH426-8020",
				"D8-4080",
				"E235-6032",
				"LZ",
				"0",
				"0",
				"0",
				"0",
				"0",
				"0"
			};
			
			bool[] isPerDiem = new bool[11] {false, false, false, false, false, false, false, false, false, false, true};
			
			decimal[] subsistence = new decimal[11] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29.95M};
			
			string[] startTime = new string[11] {
				"",
				"",
				"",
				"",
				"",
				"06:00",
				"06:00",
				"06:00",
				"06:00",
				"06:00",
				"06:00"
			};
			
			string[] break1 = new string[11] {
				"",
				"",
				"",
				"",
				"",
				"10 min",
				"10 min",
				"10 min",
				"10 min",
				"10 min",
				"10 min"
			};
			
			string[] break1iOS = new string[11] {
				"",
				"",
				"",
				"",
				"",
				"Y",
				"Y",
				"Y",
				"Y",
				"Y",
				"Y"
			};
			
			string[] break2 = new string[11] {
				"",
				"",
				"",
				"",
				"",
				"15 min",
				"15 min",
				"15 min",
				"15 min",
				"15 min",
				"15 min"
			};
			
			string[] break2iOS = new string[11] {
				"",
				"",
				"",
				"",
				"",
				"Y",
				"Y",
				"Y",
				"Y",
				"Y",
				"Y"
			};
			
			string[] endTime = new string[11] {
				"",
				"",
				"",
				"",
				"",
				"18:00",
				"18:00",
				"18:00",
				"18:00",
				"18:00",
				"18:00"
			};
			
			decimal[] meterOn = new decimal[11] {0, 0, 13999.45M, 0, 0, 0, 0, 0, 0, 0, 0};
			decimal[] meterOff = new decimal[11] {0, 0, 14002.56M, 0, 0, 0, 0, 0, 0, 0, 0};
			
			string[] note = new string[11] {
				"",
				"",
				"Here are some equipment notes",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"Here are some employee notes"
			};
			
			bool goodTimeCardEmpEqpNotes = true;
			bool timeCardEmpEqpNotesMoreData = false;
			int timeCardEmpEqpNotesCount = 0;
			
			
			reader = cmd.ExecuteReader();
			timeCardEmpEqpNotesMoreData = reader.Read();
			
			while(timeCardEmpEqpNotesMoreData && timeCardEmpEqpNotesCount != 11)
			{
				//verify employees
				if(!reader.IsDBNull(0))
				{	
					
					if(reader.GetString(0) != employee[timeCardEmpEqpNotesCount])
					{
						goodTimeCardEmpEqpNotes = false;
						Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting employee to be " + employee[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetString(0));
					}
					else
						Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found employee " + employee[timeCardEmpEqpNotesCount]);
				}
				else if(employee[timeCardEmpEqpNotesCount] != "0")
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting employee to be " + employee[timeCardEmpEqpNotesCount] + ", but I got NULL");
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found that employee was NULL");
				
				//equipment
				if(!reader.IsDBNull(1))
				{	
					
					if(reader.GetString(1) != equipment[timeCardEmpEqpNotesCount])
					{
						goodTimeCardEmpEqpNotes = false;
						Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting equipment to be " + equipment[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetString(1));
					}
					else
						Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found equipment " + equipment[timeCardEmpEqpNotesCount]);
				}
				else if(equipment[timeCardEmpEqpNotesCount] != "0")
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting equipment to be " + equipment[timeCardEmpEqpNotesCount] + ", but I got NULL");
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found that equipment was NULL");
				
				//Per Diem
				if(reader.GetBoolean(2) != isPerDiem[timeCardEmpEqpNotesCount])
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting per diem to be " + isPerDiem[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetBoolean(2));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found Per Diem " + isPerDiem[timeCardEmpEqpNotesCount]);
				
				//Subsistence
				if(reader.GetDecimal(3) != subsistence[timeCardEmpEqpNotesCount])
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting subsistence to be " + subsistence[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetDecimal(3));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found subsistence " + subsistence[timeCardEmpEqpNotesCount]);
				
				//Start Time
				if(reader.GetString(4) != startTime[timeCardEmpEqpNotesCount])
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting start time to be " + startTime[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetString(4));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found start time " + startTime[timeCardEmpEqpNotesCount]);
				
				//Break1
				if((reader.GetString(5) != break1[timeCardEmpEqpNotesCount]) && (reader.GetString(5) != break1iOS[timeCardEmpEqpNotesCount]))
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting break1 to be " + break1[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetString(5));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found break1 " + break1[timeCardEmpEqpNotesCount]);
				
				//Break2
				if((reader.GetString(6) != break2[timeCardEmpEqpNotesCount]) && (reader.GetString(6) != break2iOS[timeCardEmpEqpNotesCount]))
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting break2 to be " + break2[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetString(6));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found break2 " + break2[timeCardEmpEqpNotesCount]);
				
				//Ent Time
				if(reader.GetString(7) != endTime[timeCardEmpEqpNotesCount])
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting end time to be " + endTime[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetString(7));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found end time " + endTime[timeCardEmpEqpNotesCount]);
				
				//Meter On
				if(reader.GetDecimal(8) != meterOn[timeCardEmpEqpNotesCount])
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting meter on to be " + meterOn[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetDecimal(8));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found meter on " + meterOn[timeCardEmpEqpNotesCount]);
				
				//Meter Off
				if(reader.GetDecimal(9) != meterOff[timeCardEmpEqpNotesCount])
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting meter off to be " + meterOff[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetDecimal(9));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found meter off " + meterOff[timeCardEmpEqpNotesCount]);
				
				//Note
				if(reader.GetString(10) != note[timeCardEmpEqpNotesCount])
				{
					goodTimeCardEmpEqpNotes = false;
					Report.Failure("For record " + timeCardEmpEqpNotesCount + " I was expecting note to be " + note[timeCardEmpEqpNotesCount] + ", but I got " + reader.GetString(10));
				}
				else
					Report.Success("[" + timeCardEmpEqpNotesCount + "]Correctly found note " + note[timeCardEmpEqpNotesCount]);
				
				timeCardEmpEqpNotesCount = timeCardEmpEqpNotesCount + 1;
				timeCardEmpEqpNotesMoreData = reader.Read();
			}
			
			if(timeCardEmpEqpNotesMoreData)
				Report.Failure("Found more than 11 Time Card Emp/Eqp Notes");
			else if(timeCardEmpEqpNotesCount != 11)
				Report.Failure("I was expecting 11 Time Card Emp/Eqp Notes, but I only got " + timeCardEmpEqpNotesCount);
			else if(goodTimeCardEmpEqpNotes)
				Report.Success("All Time Card Emp/Eqp Notes are correct");
			
			sqlConnection1.Close();
			
        }
        
        private void ValidateMSETrans(String ConnectionString)
        {
        	SqlConnection sqlConnection1 = new SqlConnection(ConnectionString);
        	
        	string SQLStatement =
        		"Select cc.code [CostCode], matu.cost, job.code [JobCode], mat.code [MSECode], matu.quantity, matu.IsTM " +
				"From HJC_MaterialUsed matu " +
  				"Join HJC_CostCode cc On cc.ID = matu.CostCodeID " +
  				"Join HJC_Job job On job.ID = matu.JobID " +
        		"Join HJC_Material mat On mat.ID = matu.MaterialID " +
				"Where employeeid = (Select ID From HJC_Employee where Code = 'MENDOZA,M') " +
				"Order By CostCode, MSECode, matu.cost";
        	
        	
        	//lets you set what SQL Query you are going to use.
        	SqlCommand cmd = new SqlCommand(SQLStatement);
        	
        	
        	//this reader is going to catch the data from the SQL Query
        	SqlDataReader reader;
        	
        	//command type is text because we created our own sql command to run instead of using a stored procedure
        	cmd.CommandType = CommandType.Text; 
			cmd.Connection = sqlConnection1;

			sqlConnection1.Open();
			
			string[] costCode = new string[18]{
				"01-0910001",
				"02-0265010", "02-0265010", "02-0265010", "02-0265010", 
				"04-0410050", "04-0410050", "04-0410050", "04-0410050",
				"06-0490050", "06-0490050",
				"07-0490050", "07-0490050", 
				"07-0490053", "07-0490053", "07-0490053",
				"10-0600100", "10-0600100"
			};
			
			decimal[] cost = new decimal[18]{
				63,
				148.88M, 223.326M, 2016, 3024,
				45.21M, 50.16M, 297.648M, 330.72M,
				43.35M, 86.65M,
				40, 60,
				44, 900, 1900,
				12632, 8740
			};
			
			string[] jobCode = new string[18]{
				"HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1",
				"HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1", "HJMOBILE1"
			};
			
			string[] mseCode = new string[18]{
				"3PERMITS",
				"2B0040", "2B0040", "5HCY", "5HCY",
				"2BA040", "2BA040","2URC030", "2URC030",
				"2CMN", "2CMN",
				"2CMN", "2CMN", 
				"2BA040", "2PCFGH", "2PCIC",
				"2AC030", "5HTN"
			};
			
			decimal[] quantity = new decimal[18]{
				.18M,
				13.06M, 19.59M, 400, 600,
				4.11M, 4.56M, 17.55M, 19.5M,
				8.67M, 17.33M,
				8, 12,
				4, 2, 2,
				2000, 2000
			};
			
			bool[] isTM = new bool[18]{
				false,
				true, false, true, false,
				false, false, false, false,
				true, false,
				false, false, 
				false, false, false, 
				false, false
			};
			
			bool goodMSETrans = true;
			bool mseTransMoreData = false;
			int mseTransCount = 0;
			
			
			reader = cmd.ExecuteReader();
			mseTransMoreData = reader.Read();
			
			while(mseTransMoreData && mseTransCount != 18)
			{
				//Cost Code
				if(reader.GetString(0) != costCode[mseTransCount])
				{
					goodMSETrans = false;
					Report.Failure("For record " + mseTransCount + " I was expecting cost code to be: " + costCode[mseTransCount] + ", but I got: " + reader.GetString(0));
				}
				else
					Report.Success("[" + mseTransCount + "]Correctly found cost code: " + costCode[mseTransCount]);
				
				//Cost
				if(reader.GetDecimal(1) < cost[mseTransCount] - .05M || reader.GetDecimal(1) > cost[mseTransCount] + .05M)
				{
					goodMSETrans = false;
					Report.Failure("For record " + mseTransCount + " I was expecting cost to be: " + cost[mseTransCount] + ", but I got: " + reader.GetDecimal(1));
				}
				else
					Report.Success("[" + mseTransCount + "]Correctly found cost: " + cost[mseTransCount]);
				
				//Job
				if(reader.GetString(2) != jobCode[mseTransCount])
				{
					goodMSETrans = false;
					Report.Failure("For record " + mseTransCount + " I was expecting job to be: " + jobCode[mseTransCount] + ", but I got: " + reader.GetString(2));
				}
				else
					Report.Success("[" + mseTransCount + "]Correctly found job: " + jobCode[mseTransCount]);
				
				//MSE Code
				if(reader.GetString(3) != mseCode[mseTransCount])
				{
					goodMSETrans = false;
					Report.Failure("For record " + mseTransCount + " I was expecting MSE code to be: " + mseCode[mseTransCount] + ", but I got: " + reader.GetString(3));
				}
				else
					Report.Success("[" + mseTransCount + "]Correctly found MSE code: " + mseCode[mseTransCount]);
				
				//Quantity
				if(reader.GetDecimal(4) != quantity[mseTransCount])
				{
					goodMSETrans = false;
					Report.Failure("For record " + mseTransCount + " I was expecting quantity to be: " + quantity[mseTransCount] + ", but I got: " + reader.GetDecimal(4));
				}
				else
					Report.Success("[" + mseTransCount + "]Correctly found quantity: " + quantity[mseTransCount]);
				
				//isT&M
				if(reader.GetBoolean(5) != isTM[mseTransCount])
				{
					goodMSETrans = false;
					Report.Failure("For record " + mseTransCount + " I was expecting T&M to be: " + isTM[mseTransCount] + ", but I got: " + reader.GetBoolean(5));
				}
				else
					Report.Success("[" + mseTransCount + "]Correctly found T&M: " + isTM[mseTransCount]);
				
				mseTransCount = mseTransCount + 1;
				mseTransMoreData = reader.Read();
			}
			
			if(mseTransMoreData)
				Report.Failure("Found more than 18 MSE Transactions found");
			else if(mseTransCount != 18)
				Report.Failure("I was expecting 18 MSE Transactrions, but I only got " + mseTransCount);
			else if(goodMSETrans)
				Report.Success("All MSE Transactions are correct");
			
			sqlConnection1.Close();
			
			
        }
    }
}

